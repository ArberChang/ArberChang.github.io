{"meta":{"title":"Arber`s blogs","subtitle":"為天地立心，為生民立命，為往聖繼絕學，為萬世開太平！","description":"一个无聊喜欢搞点事情的软件工程师","author":"Arber Chang","url":"http://b.wanty.cn","root":"/"},"pages":[{"title":"","date":"2017-09-06T07:37:18.000Z","updated":"2023-04-18T01:25:56.149Z","comments":false,"path":"/404.html","permalink":"http://b.wanty.cn/404.html","excerpt":"","text":""},{"title":"分类","date":"2020-01-11T11:22:41.000Z","updated":"2023-04-18T01:25:56.153Z","comments":false,"path":"categories/index.html","permalink":"http://b.wanty.cn/categories/index.html","excerpt":"","text":""},{"title":"关于作者","date":"2020-01-11T11:22:28.000Z","updated":"2023-04-18T01:25:56.152Z","comments":false,"path":"about/index.html","permalink":"http://b.wanty.cn/about/index.html","excerpt":"","text":""},{"title":"画廊","date":"2020-01-14T06:25:36.000Z","updated":"2023-04-18T01:25:56.154Z","comments":true,"path":"photos/index.html","permalink":"http://b.wanty.cn/photos/index.html","excerpt":"","text":"2020年1月14日 某某地方玩 2020年1月13日 打个"},{"title":"标签","date":"2020-01-11T11:22:28.000Z","updated":"2023-04-18T01:25:56.156Z","comments":false,"path":"tags/index.html","permalink":"http://b.wanty.cn/tags/index.html","excerpt":"","text":""},{"title":"专题","date":"2020-01-14T07:26:57.000Z","updated":"2023-04-18T01:25:56.155Z","comments":false,"path":"series/index.html","permalink":"http://b.wanty.cn/series/index.html","excerpt":"","text":"test 测试链接1 测试链接2"}],"posts":[{"title":"Spring Cloud+Redis+Lettuce 单点模式和哨兵模式","slug":"SpringCloud+Redis+Lettuce单点模式和哨兵模式","date":"2020-01-15T03:05:18.000Z","updated":"2023-04-18T01:25:56.151Z","comments":true,"path":"技术/后端/代码/SpringCloud+Redis+Lettuce单点模式和哨兵模式/","link":"","permalink":"http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/SpringCloud+Redis+Lettuce%E5%8D%95%E7%82%B9%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"背景：Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 Redis主要分为Standalone（单例模式）和Sentinel（哨兵模式）具体这个本篇文章不过多介绍 详细请看： Redis哨兵（Sentinel）模式原理及搭建 深入剖析Redis系列(二) - Redis哨兵模式与高可用集群 环境准备： redis ： 3.2.1 os ：Linux2.6.32-696.30.1.el6.x86_64x86_64 数量：3 (三主三从) spring 2.1.* 或 spring2.0.* 配置集成：pom文件增加： 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt; &lt;version&gt;2.1.2.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt; 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt; &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt; &lt;version&gt;2.6.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt; java代码： 下面部分应用层依然次用spring2.0.*的使用方式，这些方法可以实现功能，但是缺少原子性。笔者不是特别推荐。如实在嫌项目升级麻烦，这个也是可以的。 RedisTemplateConfig.class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140import org.apache.commons.pool2.impl.GenericObjectPoolConfig;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.connection.RedisNode;import org.springframework.data.redis.connection.RedisSentinelConfiguration;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;import org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;import java.time.Duration;import java.util.HashSet;import java.util.Set;&#x2F;** * redis 配置文件 *&#x2F;@EnableCaching@Configurationpublic class RedisTemplateConfig extends CachingConfigurerSupport &#123; @Autowired private RedisPropertiesConfig redisPropertie; @Autowired private LettucePoolingClientConfiguration lettuceClientConfiguration; @Autowired private RedisSentinelConfiguration redisSentinelConfiguration; @Autowired private RedisStandaloneConfiguration redisStandaloneConfiguration; &#x2F;** * redis哨兵配置 * * @return *&#x2F; @Bean public RedisSentinelConfiguration redisSentinelConfiguration() &#123; RedisSentinelConfiguration sentinelConfig &#x3D; new RedisSentinelConfiguration(); sentinelConfig.setMaster(redisPropertie.getMaster()); Set&lt;RedisNode&gt; sentinels &#x3D; new HashSet&lt;&gt;(); String[] host &#x3D; redisPropertie.getRedisNodes().split(&quot;,&quot;); for (String redisHost : host) &#123; String[] item &#x3D; redisHost.split(&quot;:&quot;); String ip &#x3D; item[0].trim(); String port &#x3D; item[1].trim(); sentinels.add(new RedisNode(ip, Integer.parseInt(port))); &#125; sentinelConfig.setSentinels(sentinels); sentinelConfig.setDatabase(redisPropertie.getDatabase()); &#x2F;&#x2F;standConfig.setPassword(RedisPassword.of(redisPropertie.getPassword())); &#x2F;&#x2F;redis 密码 return sentinelConfig; &#125; &#x2F;** * redis 单节点配置 * * @return *&#x2F; @Bean public RedisStandaloneConfiguration redisStandaloneConfiguration() &#123; RedisStandaloneConfiguration standConfig &#x3D; new RedisStandaloneConfiguration(); standConfig.setHostName(redisPropertie.getHost()); standConfig.setPort(redisPropertie.getPort()); standConfig.setDatabase(redisPropertie.getDatabase()); &#x2F;&#x2F;standConfig.setPassword(RedisPassword.of(redisPropertie.getPassword())); &#x2F;&#x2F;redis 密码 return standConfig; &#125; &#x2F;** * lettuce 连接池配置 * * @return *&#x2F; @Bean public LettucePoolingClientConfiguration lettucePoolConfig() &#123; GenericObjectPoolConfig poolConfig &#x3D; new GenericObjectPoolConfig(); poolConfig.setMaxTotal(redisPropertie.getMaxActive()); poolConfig.setMinIdle(redisPropertie.getMinIdle()); poolConfig.setMaxIdle(redisPropertie.getMaxIdle()); poolConfig.setMaxWaitMillis(redisPropertie.getMaxWait()); poolConfig.setTestOnCreate(redisPropertie.getTestOnCreate()); poolConfig.setTestOnBorrow(redisPropertie.getTestOnBorrow()); poolConfig.setTestOnReturn(redisPropertie.getTestOnReturn()); poolConfig.setTestWhileIdle(redisPropertie.getTestWhileIdle()); poolConfig.setNumTestsPerEvictionRun(redisPropertie.getNumTestsPerEvictionRun()); poolConfig.setTimeBetweenEvictionRunsMillis(redisPropertie.getTimeBetweenEvictionRunsMillis()); poolConfig.setMinEvictableIdleTimeMillis(redisPropertie.getMinEvictableIdleTimeMills()); return LettucePoolingClientConfiguration.builder() .poolConfig(poolConfig) .commandTimeout(Duration.ofSeconds(redisPropertie.getCommandTimeout())) .shutdownTimeout(Duration.ofMillis(redisPropertie.getShutdownTimeout())) .build(); &#125; &#x2F;** * lettuce 连接工厂 * * @return *&#x2F; @Bean public RedisConnectionFactory redisConnectionFactory() &#123; LettuceConnectionFactory factory; if (redisPropertie.getCluster()) &#123; factory &#x3D; new LettuceConnectionFactory(redisSentinelConfiguration, lettuceClientConfiguration); &#125; else &#123; factory &#x3D; new LettuceConnectionFactory(redisStandaloneConfiguration, lettuceClientConfiguration); &#125; return factory; &#125; @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate() &#123; &#x2F;&#x2F;StringRedisTemplate的构造方法中默认设置了stringSerializer RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;(); template.setConnectionFactory(redisConnectionFactory()); &#x2F;&#x2F;设置开启事务 &#x2F;&#x2F;template.setEnableTransactionSupport(true); &#x2F;&#x2F;set key serializer StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer(); template.setKeySerializer(stringRedisSerializer); template.setHashKeySerializer(stringRedisSerializer); template.setHashValueSerializer(stringRedisSerializer); template.afterPropertiesSet(); return template; &#125;&#125; RedisPropertiesConfig.class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Configuration;import org.springframework.stereotype.Component;import lombok.Data;&#x2F;** * redis 属性配置 * @author Arber * @date 2019年5月12日 上午9:42:54 * @version 1.0 *&#x2F;@Data@Component@Configurationpublic class RedisPropertiesConfig &#123; @Value(&quot;$&#123;spring.redis.sentinel.nodes&#125;&quot;) private String redisNodes; @Value(&quot;$&#123;spring.redis.sentinel.master&#125;&quot;) private String master; @Value(&quot;$&#123;spring.redis.sentinel.database:0&#125;&quot;) private int database; &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; redis pool配置 @Value(&quot;$&#123;spring.redis.pool.max_idle:500&#125;&quot;) private Integer maxIdle; @Value(&quot;$&#123;spring.redis.pool.min_idle:200&#125;&quot;) private Integer minIdle; @Value(&quot;$&#123;spring.redis.pool.max_active:2000&#125;&quot;) private Integer maxActive; @Value(&quot;$&#123;spring.redis.pool.max_wait:5000&#125;&quot;) private Integer maxWait; @Value(&quot;$&#123;spring.redis.pool.numTestsPerEvictionRun:200&#125;&quot;) private Integer numTestsPerEvictionRun;&#x2F;&#x2F;一次最多evict的pool里的jedis实例个数 @Value(&quot;$&#123;spring.redis.pool.timeBetweenEvictionRunsMillis:6000&#125;&quot;) private Integer timeBetweenEvictionRunsMillis;&#x2F;&#x2F;test idle 线程的时间间隔\\ @Value(&quot;$&#123;spring.redis.pool.minEvictableIdleTimeMills:60000&#125;&quot;) private Integer minEvictableIdleTimeMills;&#x2F;&#x2F;连接池中连接可空闲的时间,毫秒 @Value(&quot;$&#123;spring.redis.pool.test-on-create:false&#125;&quot;) private Boolean testOnCreate; @Value(&quot;$&#123;spring.redis.pool.test-on-borrow:true&#125;&quot;) private Boolean testOnBorrow;&#x2F;&#x2F;在获取连接的时候检查有效性 @Value(&quot;$&#123;spring.redis.pool.test-on-return:false&#125;&quot;) private Boolean testOnReturn;&#x2F;&#x2F;当调用return Object方法时，是否进行有效性检查 @Value(&quot;$&#123;spring.redis.pool.test-while-idle:true&#125;&quot;) private Boolean testWhileIdle;&#x2F;&#x2F;在空闲时检查有效性 @Value(&quot;$&#123;spring.redis.pool.commandTimeout:60&#125;&quot;) private Integer commandTimeout; @Value(&quot;$&#123;spring.redis.pool.shutdownTimeout:100&#125;&quot;) private Integer shutdownTimeout; &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; redis 单节点配置，兼容集群问题 @Value(&quot;$&#123;horder.redis.cluster:true&#125;&quot;) private Boolean cluster; &#x2F;&#x2F; 是否配置集群 @Value(&quot;$&#123;spring.redis.host:172.22.0.22&#125;&quot;) private String host; @Value(&quot;$&#123;spring.redis.port:26379&#125;&quot;) private Integer port;&#125; RedisLock.class 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091import lombok.extern.slf4j.Slf4j;import org.springframework.data.redis.connection.RedisStringCommands;import org.springframework.data.redis.connection.ReturnType;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.types.Expiration;import org.springframework.stereotype.Component;import javax.annotation.Resource;import java.nio.charset.Charset;import java.util.concurrent.TimeUnit;&#x2F;** * @Description: 分布式锁工具类 * @Author:Arber * @CreateDate: 2019年5月7日13:25:47 *&#x2F;@Component@Slf4jpublic class RedisLock &#123; @Resource private RedisTemplate redisTemplate; public static final String UNLOCK_LUA; &#x2F;** * 释放锁脚本，原子操作 *&#x2F; static &#123; StringBuilder sb &#x3D; new StringBuilder(); sb.append(&quot;if redis.call(\\&quot;get\\&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] &quot;); sb.append(&quot;then &quot;); sb.append(&quot; return redis.call(\\&quot;del\\&quot;,KEYS[1]) &quot;); sb.append(&quot;else &quot;); sb.append(&quot; return 0 &quot;); sb.append(&quot;end &quot;); UNLOCK_LUA &#x3D; sb.toString(); &#125; &#x2F;** * 获取分布式锁，原子操作 * @param lockKey * @param requestId 唯一ID, 可以使用UUID.randomUUID().toString(); * @param expire * @param timeUnit * @return *&#x2F; public boolean tryLock(String lockKey, String requestId, long expire, TimeUnit timeUnit) &#123; try&#123; RedisCallback&lt;Boolean&gt; callback &#x3D; (connection) -&gt; &#123; return connection.set(lockKey.getBytes(Charset.forName(&quot;UTF-8&quot;)), requestId.getBytes(Charset.forName(&quot;UTF-8&quot;)), Expiration.seconds(timeUnit.toSeconds(expire)), RedisStringCommands.SetOption.SET_IF_ABSENT); &#125;; return (Boolean)redisTemplate.execute(callback); &#125; catch (Exception e) &#123; log.error(&quot;redis lock error.&quot;, e); &#125; return false; &#125; &#x2F;** * 释放锁 * @param lockKey * @param requestId 唯一ID * @return *&#x2F; public boolean releaseLock(String lockKey, String requestId) &#123; RedisCallback&lt;Boolean&gt; callback &#x3D; (connection) -&gt; &#123; return connection.eval(UNLOCK_LUA.getBytes(), ReturnType.BOOLEAN ,1, lockKey.getBytes(Charset.forName(&quot;UTF-8&quot;)), requestId.getBytes(Charset.forName(&quot;UTF-8&quot;))); &#125;; return (Boolean)redisTemplate.execute(callback); &#125; &#x2F;** * 获取Redis锁的value值 * @param lockKey * @return *&#x2F; public String getLock(String lockKey) &#123; try &#123; RedisCallback&lt;String&gt; callback &#x3D; (connection) -&gt; &#123; return new String(connection.get(lockKey.getBytes()), Charset.forName(&quot;UTF-8&quot;)); &#125;; return (String)redisTemplate.execute(callback); &#125; catch (Exception e) &#123; log.error(&quot;get redis occurred an exception&quot;, e); &#125; return null; &#125;&#125; RedisCacheClient.classimport lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisConnectionUtils;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;&#x2F;** * Redis处理器 * * @author Arber * @version 1.0 * @date 2019年5月21日 下午4:52:06 *&#x2F;@Slf4j@Componentpublic class RedisCacheClient &#123; private static final int MAX_REPLAY &#x3D; 3; private static final String UPDATE_COLUMN_NAME &#x3D; &quot;Update&quot;; @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; &#x2F;** * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @param clazz 返回结果类 * @param &lt;T&gt; 泛型 * @return 缓存值 *&#x2F; public &lt;T&gt; T get(String tableName, String columnName, String primary, Class&lt;? extends T&gt; clazz) &#123; Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary)); return values.containsKey(columnName) ? AirJsonUtil.parseObject(values.get(columnName).toString(), clazz) : null; &#125; &#x2F;** * 解压缩并转换对象 * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串 * * @param tableName * @param columnName * @param primary * @param clazz * @return *&#x2F; public &lt;T&gt; T getUnzip(String tableName, String columnName, String primary, Class&lt;? extends T&gt; clazz) &#123; Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary)); if (!values.containsKey(columnName)) &#123; return null; &#125; String value &#x3D; values.get(columnName).toString(); &#x2F;&#x2F;解压缩并转换对象 return AirJsonUtil.parseObject(AirStringUtil.uncompress(value), clazz); &#125; &#x2F;** * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @return 缓存值 *&#x2F; public String get(String tableName, String columnName, String primary) &#123; Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary)); return values.containsKey(columnName) ? values.get(columnName).toString() : null; &#125; &#x2F;** * 删除键 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @return 缓存值 *&#x2F; public Boolean remove(String tableName, String columnName, String primary) &#123; return redisTemplate.delete(createKey(tableName, columnName, primary)); &#125; &#x2F;** * 更新缓存值 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @param value 缓存值 * @param updateDateTime 更新时间 * @param expireTime 过期时间 * @param replay 重试次数 * @return 更新结果 *&#x2F; public Boolean updateValueMulti(String tableName, String columnName, String primary, String value, Date updateDateTime, Date expireTime, int replay) &#123; if (replay &gt;&#x3D; MAX_REPLAY) &#123; return false; &#125; String key &#x3D; createKey(tableName, columnName, primary); Map&lt;Object, Object&gt; valuesMap &#x3D; redisTemplate.opsForHash().entries(key); if (valuesMap.containsKey(UPDATE_COLUMN_NAME)) &#123; if (Long.parseLong((String) valuesMap.get(UPDATE_COLUMN_NAME)) &gt;&#x3D; updateDateTime.getTime()) &#123; return true; &#125; redisTemplate.watch(key); &#125; if (valuesMap.isEmpty()) &#123; valuesMap &#x3D; new HashMap&lt;&gt;(); &#125; valuesMap.put(columnName, value); valuesMap.put(UPDATE_COLUMN_NAME, String.valueOf(updateDateTime.getTime())); &#x2F;&#x2F; 增加事务支持(在RedisSentinelConfig里有事务支持配置) redisTemplate.setEnableTransactionSupport(true); redisTemplate.multi(); redisTemplate.opsForHash().putAll(key, valuesMap); redisTemplate.expireAt(key, expireTime); List&lt;Object&gt; rs &#x3D; redisTemplate.exec(); RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory()); if (rs &#x3D;&#x3D; null) &#123; return updateValueMulti(tableName, columnName, primary, value, updateDateTime, expireTime, ++replay); &#125; return true; &#125; &#x2F;** * 更新缓存值 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @param value 缓存值 * @param updateDateTime 更新时间 * @param expireTime 过期时间 * @param replay 重试次数 * @return 更新结果 *&#x2F; @Transactional(rollbackFor &#x3D; Exception.class) public Boolean updateValue(String tableName, String columnName, String primary, String value, Date updateDateTime, Date expireTime, int replay) &#123; &#x2F;&#x2F; 增加事务支持(在RedisSentinelConfig里有事务支持配置) redisTemplate.setEnableTransactionSupport(true); if (replay &gt;&#x3D; MAX_REPLAY) &#123; return false; &#125; String key &#x3D; createKey(tableName, columnName, primary); Map&lt;Object, Object&gt; valuesMap &#x3D; redisTemplate.opsForHash().entries(key); if (valuesMap.containsKey(UPDATE_COLUMN_NAME)) &#123; if (Long.parseLong((String) valuesMap.get(UPDATE_COLUMN_NAME)) &gt;&#x3D; updateDateTime.getTime()) &#123; return true; &#125; &#125; if (valuesMap.isEmpty()) &#123; valuesMap &#x3D; new HashMap&lt;&gt;(); &#125; valuesMap.put(columnName, value); valuesMap.put(UPDATE_COLUMN_NAME, String.valueOf(updateDateTime.getTime())); &#x2F;&#x2F; 更新数据 redisTemplate.opsForHash().putAll(key, valuesMap); return redisTemplate.expireAt(key, expireTime); &#125; &#x2F;** * 创建Key关键表列关键字 * * @param tableName 表名 * @param columnName 列名 * @param primary 主健 * @return 关键字 *&#x2F; private String createKey(String tableName, String columnName, String primary) &#123; return tableName + &quot;:&quot; + primary + &quot;:&quot; + columnName; &#125; &#x2F;** * 替换方法 setEntryIfNotExists(); * Only set the key if it does not already exist * * @param key * @param ticketNo NX -- Only set the key if it does not already exist. * XX -- Only set the key if it already exist * @param expx EX|PX, expire time units, EX&#x3D;seconds; PX &#x3D; milliseconds * @param time 过期时间 * @return *&#x2F; @Deprecated public boolean setEntryIfNotExists(String key, String ticketNo, String expx, int time) &#123; TimeUnit unit &#x3D; null; switch (expx) &#123; case &quot;EX&quot;: unit &#x3D; TimeUnit.SECONDS; break; case &quot;PX&quot;: unit &#x3D; TimeUnit.MILLISECONDS; break; default: unit &#x3D; TimeUnit.SECONDS; &#125; return redisTemplate.opsForValue().setIfAbsent(key, ticketNo, time, unit); &#125; &#x2F;** * 通过redis过期时间实现限制QPS * * @param key 主键 * @param ticketNo 票号 * @param time 过期时间 * @param expx 时间单位 TimeUnit * @return *&#x2F; public boolean setEntryIfNotExists(String key, String ticketNo, int time, TimeUnit expx) &#123; return redisTemplate.opsForValue().setIfAbsent(key, ticketNo, time, expx); &#125; &#x2F;** * 释放redis链接 *&#x2F; public void unbindConnection() &#123; RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory()); &#125; Spring Data JPA为我们提供了下面的Serializer：GenericToStringSerializer、Jackson2JsonRedisSerializer、JacksonJsonRedisSerializer、JdkSerializationRedisSerializer、OxmSerializer、StringRedisSerializer。由于兼容旧的数据本文没有采用（个人比较喜欢下面这个）。不同的对比 123456789101112131415161718192021222324public RedisTemplate&lt;String, Object&gt; redisTemplate() &#123; &#x2F;&#x2F;创建Json序列化对象 Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer&lt;&gt;(Object.class); &#x2F;&#x2F;解决查询缓存转换异常的问题 ObjectMapper om &#x3D; new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); &#x2F;&#x2F; 将默认序列化改为Jackson2JsonRedisSerializer序列化 RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;(); &#x2F;&#x2F; key序列化 template.setKeySerializer(jackson2JsonRedisSerializer); &#x2F;&#x2F; value序列化 template.setValueSerializer(jackson2JsonRedisSerializer); &#x2F;&#x2F; Hash key序列化 template.setHashKeySerializer(jackson2JsonRedisSerializer); &#x2F;&#x2F; Hash value序列化 template.setHashValueSerializer(jackson2JsonRedisSerializer); template.setConnectionFactory(redisConnectionFactory()); template.afterPropertiesSet(); return template;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"后端","slug":"技术/后端","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"},{"name":"代码","slug":"技术/后端/代码","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://b.wanty.cn/tags/Spring/"},{"name":"redis","slug":"redis","permalink":"http://b.wanty.cn/tags/redis/"},{"name":"lettuce","slug":"lettuce","permalink":"http://b.wanty.cn/tags/lettuce/"},{"name":"java","slug":"java","permalink":"http://b.wanty.cn/tags/java/"}]},{"title":"Oracle游标测试","slug":"Oracle游标测试","date":"2019-10-11T11:20:35.000Z","updated":"2023-04-18T01:25:56.150Z","comments":true,"path":"技术/后端/数据库/Oracle游标测试/","link":"","permalink":"http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle%E6%B8%B8%E6%A0%87%E6%B5%8B%E8%AF%95/","excerpt":"","text":"1、创建测试表1234567891011121314151617181920212223create table a_test1 ( column_1 int not null constraint a_test2_pk primary key, column_2 varchar2(12) )create table a_test2 ( column_1 int not null constraint a_test2_pk primary key, column_2 varchar2(12) )CREATE SEQUENCE seq_a_test INCREMENT BY 1 -- 每次加几个 START WITH 1399 -- 从1开始计数 NOMAXVALUE -- 不设置最大值 NOCYCLE -- 一直累加，不循环 CACHE 10; 2、循环插入1234567891011--普通循环插入begin for a in 1 .. 100 loop insert into A_TEST1(column_1, column_2) values (seq_a_test.nextval,'aaa'); end loop; commit ;end;select * from a_test1; 12345678910111213141516171819202122--cursor 循环插入declare cursor cursor_id is select COLUMN_1 from a_test1 order by COLUMN_1 desc ; cid cursor_id%rowtype;begin open cursor_id; loop fetch cursor_id into cid; Exit when cursor_id%notfound; if cid.COLUMN_1 &lt;&gt; 1400 then insert into A_TEST2(column_1, column_2) values (cid.COLUMN_1+1000,'aaa'); end if; end loop; EXCEPTION when others then close cursor_id; if cursor_id%isopen then close cursor_id; end if; commit;end; 3、删除数据123drop table a_test1;drop table a_test2;drop sequence seq_a_test;","categories":[{"name":"技术","slug":"技术","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"后端","slug":"技术/后端","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"},{"name":"数据库","slug":"技术/后端/数据库","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://b.wanty.cn/tags/Oracle/"}]},{"title":"CentOs7  安装Docker 并配置代理访问外网","slug":"CentOs7-安装Docker-并配置代理访问外网","date":"2019-05-11T11:58:39.000Z","updated":"2023-04-18T01:25:56.150Z","comments":true,"path":"技术/后端/服务器/CentOs7-安装Docker-并配置代理访问外网/","link":"","permalink":"http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CentOs7-%E5%AE%89%E8%A3%85Docker-%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/","excerpt":"","text":"Linux version 3.10.0-693.el7.x86_64docker为最新的即可 一 配置yum代理1vim &#x2F;etc&#x2F;yum.conf 1proxy&#x3D;http:&#x2F;&#x2F;172.20.36.11:80 二 修改yum源为阿里源进入yum源配置文件夹。（配置之前先看看有没有安装wget命令呢，没的话可以先用当前的yum源安装一下再说。yum -y install wget）1cd &#x2F;etc&#x2F;yum.repos.d 备份一下之前的配置文件。1mv .&#x2F;CentOS-Base.repo .&#x2F;CentOS-Base.repo.bak 下载阿里源或者163源12wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repowget http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo 移动到源默认位置12mv CentOS7-Base-163.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repomv Centos-7.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo 运行yum clean all , yum makecache生成缓存即可，之后便可以使用yum安装软件了。12yum clean allyum makecache 三 docker 安装报错 container-selinux &gt;= 2.9 解决阿里云上的epel源1yum -y install epel-release 安装 container-selinux1yum -y install container-selinux 四 安装docker安装docker服务1yum -y install docker-ce 配置docker源1vim &#x2F;etc&#x2F;docker&#x2F;deamon.json 1234&#123; &quot;registry-mirrors&quot;: [ &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;], &quot;insecure-registries&quot;: [ &quot;172.19.69.2:5000&quot;,&quot;172.22.0.35:5000&quot;]&#125; 配置docker http代理12mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.dvim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;http-proxy.conf 12[Service] Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;username:password@126.15.15.1:8888&quot; 刷新源并重启123systemctl daemon-reloadsystemctl restart docker systemctl show --property&#x3D;Environment docker 设置docker开启自动启动12sudo systemctl enable dockersudo systemctl start docker","categories":[{"name":"技术","slug":"技术","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"后端","slug":"技术/后端","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"},{"name":"服务器","slug":"技术/后端/服务器","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://b.wanty.cn/tags/Docker/"},{"name":"linxu","slug":"linxu","permalink":"http://b.wanty.cn/tags/linxu/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"},{"name":"后端","slug":"技术/后端","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"},{"name":"代码","slug":"技术/后端/代码","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/"},{"name":"数据库","slug":"技术/后端/数据库","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"服务器","slug":"技术/后端/服务器","permalink":"http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://b.wanty.cn/tags/Spring/"},{"name":"redis","slug":"redis","permalink":"http://b.wanty.cn/tags/redis/"},{"name":"lettuce","slug":"lettuce","permalink":"http://b.wanty.cn/tags/lettuce/"},{"name":"java","slug":"java","permalink":"http://b.wanty.cn/tags/java/"},{"name":"Oracle","slug":"Oracle","permalink":"http://b.wanty.cn/tags/Oracle/"},{"name":"Docker","slug":"Docker","permalink":"http://b.wanty.cn/tags/Docker/"},{"name":"linxu","slug":"linxu","permalink":"http://b.wanty.cn/tags/linxu/"}]}