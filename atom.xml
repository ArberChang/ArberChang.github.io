<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arber`s blogs</title>
  
  <subtitle>為天地立心，為生民立命，為往聖繼絕學，為萬世開太平！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://b.wanty.cn/"/>
  <updated>2023-04-18T01:25:56.151Z</updated>
  <id>http://b.wanty.cn/</id>
  
  <author>
    <name>Arber Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud+Redis+Lettuce 单点模式和哨兵模式</title>
    <link href="http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/SpringCloud+Redis+Lettuce%E5%8D%95%E7%82%B9%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/SpringCloud+Redis+Lettuce%E5%8D%95%E7%82%B9%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-01-15T03:05:18.000Z</published>
    <updated>2023-04-18T01:25:56.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p><p>Redis主要分为Standalone（单例模式）和Sentinel（哨兵模式）具体这个本篇文章不过多介绍</p><p><strong>详细请看：</strong></p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODY4ODExL2FydGljbGUvZGV0YWlscy85MDI1NzA0NQ==" title="https://blog.csdn.net/qq_35868811/article/details/90257045">Redis哨兵（Sentinel）模式原理及搭建<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdkMjI2YTZmYjlhMDFhMWUwMWZmNjQ=" title="https://juejin.im/post/5b7d226a6fb9a01a1e01ff64">深入剖析Redis系列(二) - Redis哨兵模式与高可用集群<i class="fa fa-external-link"></i></span></li></ol><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><ul><li>redis ： 3.2.1</li><li>os ：Linux2.6.32-696.30.1.el6.x86_64x86_64</li><li>数量：3 (三主三从)</li><li>spring 2.1.* 或 spring2.0.*</li></ul><h2 id="配置集成："><a href="#配置集成：" class="headerlink" title="配置集成："></a>配置集成：</h2><p><strong>pom文件增加：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.2.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>java代码：</strong></p><p>下面部分应用层依然次用spring2.0.*的使用方式，这些方法可以实现功能，但是缺少原子性。笔者不是特别推荐。如实在嫌项目升级麻烦，这个也是可以的。</p><p>RedisTemplateConfig.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line">import org.springframework.cache.annotation.EnableCaching;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.RedisNode;</span><br><span class="line">import org.springframework.data.redis.connection.RedisSentinelConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisStandaloneConfiguration;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">import java.time.Duration;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * redis 配置文件</span><br><span class="line"> *&#x2F;</span><br><span class="line">@EnableCaching</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisTemplateConfig extends CachingConfigurerSupport &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisPropertiesConfig redisPropertie;</span><br><span class="line">    @Autowired</span><br><span class="line">    private LettucePoolingClientConfiguration lettuceClientConfiguration;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisSentinelConfiguration redisSentinelConfiguration;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisStandaloneConfiguration redisStandaloneConfiguration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * redis哨兵配置</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisSentinelConfiguration redisSentinelConfiguration() &#123;</span><br><span class="line">        RedisSentinelConfiguration sentinelConfig &#x3D; new RedisSentinelConfiguration();</span><br><span class="line">        sentinelConfig.setMaster(redisPropertie.getMaster());</span><br><span class="line">        Set&lt;RedisNode&gt; sentinels &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        String[] host &#x3D; redisPropertie.getRedisNodes().split(&quot;,&quot;);</span><br><span class="line">        for (String redisHost : host) &#123;</span><br><span class="line">            String[] item &#x3D; redisHost.split(&quot;:&quot;);</span><br><span class="line">            String ip &#x3D; item[0].trim();</span><br><span class="line">            String port &#x3D; item[1].trim();</span><br><span class="line">            sentinels.add(new RedisNode(ip, Integer.parseInt(port)));</span><br><span class="line">        &#125;</span><br><span class="line">        sentinelConfig.setSentinels(sentinels);</span><br><span class="line">        sentinelConfig.setDatabase(redisPropertie.getDatabase());</span><br><span class="line">        &#x2F;&#x2F;standConfig.setPassword(RedisPassword.of(redisPropertie.getPassword())); &#x2F;&#x2F;redis 密码</span><br><span class="line">        return sentinelConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * redis 单节点配置</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisStandaloneConfiguration redisStandaloneConfiguration() &#123;</span><br><span class="line">        RedisStandaloneConfiguration standConfig &#x3D; new RedisStandaloneConfiguration();</span><br><span class="line">        standConfig.setHostName(redisPropertie.getHost());</span><br><span class="line">        standConfig.setPort(redisPropertie.getPort());</span><br><span class="line">        standConfig.setDatabase(redisPropertie.getDatabase());</span><br><span class="line">        &#x2F;&#x2F;standConfig.setPassword(RedisPassword.of(redisPropertie.getPassword()));  &#x2F;&#x2F;redis 密码</span><br><span class="line">        return standConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * lettuce 连接池配置</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public LettucePoolingClientConfiguration lettucePoolConfig() &#123;</span><br><span class="line">        GenericObjectPoolConfig poolConfig &#x3D; new GenericObjectPoolConfig();</span><br><span class="line"></span><br><span class="line">        poolConfig.setMaxTotal(redisPropertie.getMaxActive());</span><br><span class="line">        poolConfig.setMinIdle(redisPropertie.getMinIdle());</span><br><span class="line">        poolConfig.setMaxIdle(redisPropertie.getMaxIdle());</span><br><span class="line">        poolConfig.setMaxWaitMillis(redisPropertie.getMaxWait());</span><br><span class="line">        poolConfig.setTestOnCreate(redisPropertie.getTestOnCreate());</span><br><span class="line">        poolConfig.setTestOnBorrow(redisPropertie.getTestOnBorrow());</span><br><span class="line">        poolConfig.setTestOnReturn(redisPropertie.getTestOnReturn());</span><br><span class="line">        poolConfig.setTestWhileIdle(redisPropertie.getTestWhileIdle());</span><br><span class="line">        poolConfig.setNumTestsPerEvictionRun(redisPropertie.getNumTestsPerEvictionRun());</span><br><span class="line">        poolConfig.setTimeBetweenEvictionRunsMillis(redisPropertie.getTimeBetweenEvictionRunsMillis());</span><br><span class="line">        poolConfig.setMinEvictableIdleTimeMillis(redisPropertie.getMinEvictableIdleTimeMills());</span><br><span class="line"></span><br><span class="line">        return LettucePoolingClientConfiguration.builder()</span><br><span class="line">                .poolConfig(poolConfig)</span><br><span class="line">                .commandTimeout(Duration.ofSeconds(redisPropertie.getCommandTimeout()))</span><br><span class="line">                .shutdownTimeout(Duration.ofMillis(redisPropertie.getShutdownTimeout()))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * lettuce 连接工厂</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Bean</span><br><span class="line">    public RedisConnectionFactory redisConnectionFactory() &#123;</span><br><span class="line">        LettuceConnectionFactory factory;</span><br><span class="line">        if (redisPropertie.getCluster()) &#123;</span><br><span class="line">            factory &#x3D; new LettuceConnectionFactory(redisSentinelConfiguration, lettuceClientConfiguration);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            factory &#x3D; new LettuceConnectionFactory(redisStandaloneConfiguration, lettuceClientConfiguration);</span><br><span class="line">        &#125;</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String, Object&gt; redisTemplate() &#123;</span><br><span class="line">        &#x2F;&#x2F;StringRedisTemplate的构造方法中默认设置了stringSerializer</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置开启事务</span><br><span class="line">        &#x2F;&#x2F;template.setEnableTransactionSupport(true);</span><br><span class="line">        &#x2F;&#x2F;set key serializer</span><br><span class="line">        StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        return template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisPropertiesConfig.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * redis 属性配置</span><br><span class="line"> * @author Arber</span><br><span class="line"> * @date 2019年5月12日 上午9:42:54</span><br><span class="line"> * @version 1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Data</span><br><span class="line">@Component</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisPropertiesConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.sentinel.nodes&#125;&quot;)</span><br><span class="line">    private String redisNodes;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.sentinel.master&#125;&quot;)</span><br><span class="line">    private String master;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.sentinel.database:0&#125;&quot;)</span><br><span class="line">    private int database;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; redis pool配置</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.max_idle:500&#125;&quot;)</span><br><span class="line">    private Integer maxIdle;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.min_idle:200&#125;&quot;)</span><br><span class="line">    private Integer minIdle;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.max_active:2000&#125;&quot;)</span><br><span class="line">    private Integer maxActive;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.max_wait:5000&#125;&quot;)</span><br><span class="line">    private Integer maxWait;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.numTestsPerEvictionRun:200&#125;&quot;)</span><br><span class="line">    private Integer numTestsPerEvictionRun;&#x2F;&#x2F;一次最多evict的pool里的jedis实例个数</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.timeBetweenEvictionRunsMillis:6000&#125;&quot;)</span><br><span class="line">    private Integer timeBetweenEvictionRunsMillis;&#x2F;&#x2F;test idle 线程的时间间隔\</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.minEvictableIdleTimeMills:60000&#125;&quot;)</span><br><span class="line">    private Integer minEvictableIdleTimeMills;&#x2F;&#x2F;连接池中连接可空闲的时间,毫秒</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.test-on-create:false&#125;&quot;)</span><br><span class="line">    private Boolean testOnCreate;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.test-on-borrow:true&#125;&quot;)</span><br><span class="line">    private Boolean testOnBorrow;&#x2F;&#x2F;在获取连接的时候检查有效性</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.test-on-return:false&#125;&quot;)</span><br><span class="line">    private Boolean testOnReturn;&#x2F;&#x2F;当调用return Object方法时，是否进行有效性检查</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.test-while-idle:true&#125;&quot;)</span><br><span class="line">    private Boolean testWhileIdle;&#x2F;&#x2F;在空闲时检查有效性</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.commandTimeout:60&#125;&quot;)</span><br><span class="line">    private Integer commandTimeout;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.pool.shutdownTimeout:100&#125;&quot;)</span><br><span class="line">    private Integer shutdownTimeout;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; redis 单节点配置，兼容集群问题</span><br><span class="line">    @Value(&quot;$&#123;horder.redis.cluster:true&#125;&quot;)</span><br><span class="line">    private Boolean cluster; &#x2F;&#x2F; 是否配置集群</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.host:172.22.0.22&#125;&quot;)</span><br><span class="line">    private String host;</span><br><span class="line">    @Value(&quot;$&#123;spring.redis.port:26379&#125;&quot;)</span><br><span class="line">    private Integer port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisLock.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.data.redis.connection.RedisStringCommands;</span><br><span class="line">import org.springframework.data.redis.connection.ReturnType;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.core.types.Expiration;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @Description: 分布式锁工具类</span><br><span class="line"> * @Author:Arber</span><br><span class="line"> * @CreateDate: 2019年5月7日13:25:47</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class RedisLock &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public static final String UNLOCK_LUA;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 释放锁脚本，原子操作</span><br><span class="line">     *&#x2F;</span><br><span class="line">    static &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        sb.append(&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] &quot;);</span><br><span class="line">        sb.append(&quot;then &quot;);</span><br><span class="line">        sb.append(&quot;    return redis.call(\&quot;del\&quot;,KEYS[1]) &quot;);</span><br><span class="line">        sb.append(&quot;else &quot;);</span><br><span class="line">        sb.append(&quot;    return 0 &quot;);</span><br><span class="line">        sb.append(&quot;end &quot;);</span><br><span class="line">        UNLOCK_LUA &#x3D; sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取分布式锁，原子操作</span><br><span class="line">     * @param lockKey</span><br><span class="line">     * @param requestId 唯一ID, 可以使用UUID.randomUUID().toString();</span><br><span class="line">     * @param expire</span><br><span class="line">     * @param timeUnit</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean tryLock(String lockKey, String requestId, long expire, TimeUnit timeUnit) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            RedisCallback&lt;Boolean&gt; callback &#x3D; (connection) -&gt; &#123;</span><br><span class="line">                return connection.set(lockKey.getBytes(Charset.forName(&quot;UTF-8&quot;)), requestId.getBytes(Charset.forName(&quot;UTF-8&quot;)), Expiration.seconds(timeUnit.toSeconds(expire)), RedisStringCommands.SetOption.SET_IF_ABSENT);</span><br><span class="line">            &#125;;</span><br><span class="line">            return (Boolean)redisTemplate.execute(callback);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;redis lock error.&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 释放锁</span><br><span class="line">     * @param lockKey</span><br><span class="line">     * @param requestId 唯一ID</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean releaseLock(String lockKey, String requestId) &#123;</span><br><span class="line">        RedisCallback&lt;Boolean&gt; callback &#x3D; (connection) -&gt; &#123;</span><br><span class="line">            return connection.eval(UNLOCK_LUA.getBytes(), ReturnType.BOOLEAN ,1, lockKey.getBytes(Charset.forName(&quot;UTF-8&quot;)), requestId.getBytes(Charset.forName(&quot;UTF-8&quot;)));</span><br><span class="line">        &#125;;</span><br><span class="line">        return (Boolean)redisTemplate.execute(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取Redis锁的value值</span><br><span class="line">     * @param lockKey</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String getLock(String lockKey) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            RedisCallback&lt;String&gt; callback &#x3D; (connection) -&gt; &#123;</span><br><span class="line">                return new String(connection.get(lockKey.getBytes()), Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">            &#125;;</span><br><span class="line">            return (String)redisTemplate.execute(callback);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;get redis occurred an exception&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RedisCacheClient.class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.RedisConnectionUtils;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Redis处理器</span><br><span class="line"> *</span><br><span class="line"> * @author Arber</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @date 2019年5月21日 下午4:52:06</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class RedisCacheClient &#123;</span><br><span class="line">    private static final int MAX_REPLAY &#x3D; 3;</span><br><span class="line">    private static final String UPDATE_COLUMN_NAME &#x3D; &quot;Update&quot;;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串</span><br><span class="line">     *</span><br><span class="line">     * @param tableName  表名</span><br><span class="line">     * @param columnName 列名</span><br><span class="line">     * @param primary    主健</span><br><span class="line">     * @param clazz      返回结果类</span><br><span class="line">     * @param &lt;T&gt;        泛型</span><br><span class="line">     * @return 缓存值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public &lt;T&gt; T get(String tableName, String columnName, String primary, Class&lt;? extends T&gt; clazz) &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary));</span><br><span class="line">        return values.containsKey(columnName) ? AirJsonUtil.parseObject(values.get(columnName).toString(), clazz) : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 解压缩并转换对象</span><br><span class="line">     * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串</span><br><span class="line">     *</span><br><span class="line">     * @param tableName</span><br><span class="line">     * @param columnName</span><br><span class="line">     * @param primary</span><br><span class="line">     * @param clazz</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public &lt;T&gt; T getUnzip(String tableName, String columnName, String primary, Class&lt;? extends T&gt; clazz) &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary));</span><br><span class="line">        if (!values.containsKey(columnName)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        String value &#x3D; values.get(columnName).toString();</span><br><span class="line">        &#x2F;&#x2F;解压缩并转换对象</span><br><span class="line">        return AirJsonUtil.parseObject(AirStringUtil.uncompress(value), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 得到缓存值,直接得到缓存值(不逆序列化),不存在则返回空字符串</span><br><span class="line">     *</span><br><span class="line">     * @param tableName  表名</span><br><span class="line">     * @param columnName 列名</span><br><span class="line">     * @param primary    主健</span><br><span class="line">     * @return 缓存值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public String get(String tableName, String columnName, String primary) &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; values &#x3D; redisTemplate.opsForHash().entries(createKey(tableName, columnName, primary));</span><br><span class="line">        return values.containsKey(columnName) ? values.get(columnName).toString() : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除键</span><br><span class="line">     *</span><br><span class="line">     * @param tableName  表名</span><br><span class="line">     * @param columnName 列名</span><br><span class="line">     * @param primary    主健</span><br><span class="line">     * @return 缓存值</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Boolean remove(String tableName, String columnName, String primary) &#123;</span><br><span class="line">        return redisTemplate.delete(createKey(tableName, columnName, primary));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更新缓存值</span><br><span class="line">     *</span><br><span class="line">     * @param tableName      表名</span><br><span class="line">     * @param columnName     列名</span><br><span class="line">     * @param primary        主健</span><br><span class="line">     * @param value          缓存值</span><br><span class="line">     * @param updateDateTime 更新时间</span><br><span class="line">     * @param expireTime     过期时间</span><br><span class="line">     * @param replay         重试次数</span><br><span class="line">     * @return 更新结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Boolean updateValueMulti(String tableName, String columnName, String primary, String value, Date updateDateTime, Date expireTime,</span><br><span class="line">                                    int replay) &#123;</span><br><span class="line">        if (replay &gt;&#x3D; MAX_REPLAY) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        String key &#x3D; createKey(tableName, columnName, primary);</span><br><span class="line">        Map&lt;Object, Object&gt; valuesMap &#x3D; redisTemplate.opsForHash().entries(key);</span><br><span class="line">        if (valuesMap.containsKey(UPDATE_COLUMN_NAME)) &#123;</span><br><span class="line">            if (Long.parseLong((String) valuesMap.get(UPDATE_COLUMN_NAME)) &gt;&#x3D; updateDateTime.getTime()) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            redisTemplate.watch(key);</span><br><span class="line">        &#125;</span><br><span class="line">        if (valuesMap.isEmpty()) &#123;</span><br><span class="line">            valuesMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        valuesMap.put(columnName, value);</span><br><span class="line">        valuesMap.put(UPDATE_COLUMN_NAME, String.valueOf(updateDateTime.getTime()));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 增加事务支持(在RedisSentinelConfig里有事务支持配置)</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line">        redisTemplate.multi();</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, valuesMap);</span><br><span class="line">        redisTemplate.expireAt(key, expireTime);</span><br><span class="line">        List&lt;Object&gt; rs &#x3D; redisTemplate.exec();</span><br><span class="line">        RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory());</span><br><span class="line">        if (rs &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return updateValueMulti(tableName, columnName, primary, value, updateDateTime, expireTime, ++replay);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 更新缓存值</span><br><span class="line">     *</span><br><span class="line">     * @param tableName      表名</span><br><span class="line">     * @param columnName     列名</span><br><span class="line">     * @param primary        主健</span><br><span class="line">     * @param value          缓存值</span><br><span class="line">     * @param updateDateTime 更新时间</span><br><span class="line">     * @param expireTime     过期时间</span><br><span class="line">     * @param replay         重试次数</span><br><span class="line">     * @return 更新结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Transactional(rollbackFor &#x3D; Exception.class)</span><br><span class="line">    public Boolean updateValue(String tableName, String columnName, String primary, String value, Date updateDateTime, Date expireTime, int replay) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 增加事务支持(在RedisSentinelConfig里有事务支持配置)</span><br><span class="line">        redisTemplate.setEnableTransactionSupport(true);</span><br><span class="line">        if (replay &gt;&#x3D; MAX_REPLAY) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        String key &#x3D; createKey(tableName, columnName, primary);</span><br><span class="line">        Map&lt;Object, Object&gt; valuesMap &#x3D; redisTemplate.opsForHash().entries(key);</span><br><span class="line">        if (valuesMap.containsKey(UPDATE_COLUMN_NAME)) &#123;</span><br><span class="line">            if (Long.parseLong((String) valuesMap.get(UPDATE_COLUMN_NAME)) &gt;&#x3D; updateDateTime.getTime()) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (valuesMap.isEmpty()) &#123;</span><br><span class="line">            valuesMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        valuesMap.put(columnName, value);</span><br><span class="line">        valuesMap.put(UPDATE_COLUMN_NAME, String.valueOf(updateDateTime.getTime()));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 更新数据</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, valuesMap);</span><br><span class="line">        return redisTemplate.expireAt(key, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建Key关键表列关键字</span><br><span class="line">     *</span><br><span class="line">     * @param tableName  表名</span><br><span class="line">     * @param columnName 列名</span><br><span class="line">     * @param primary    主健</span><br><span class="line">     * @return 关键字</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String createKey(String tableName, String columnName, String primary) &#123;</span><br><span class="line">        return tableName + &quot;:&quot; + primary + &quot;:&quot; + columnName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 替换方法 setEntryIfNotExists();</span><br><span class="line">     * Only set the key if it does not already exist</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param ticketNo NX -- Only set the key if it does not already exist.</span><br><span class="line">     *                 XX -- Only set the key if it already exist</span><br><span class="line">     * @param expx     EX|PX, expire time units, EX&#x3D;seconds; PX &#x3D; milliseconds</span><br><span class="line">     * @param time     过期时间</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Deprecated</span><br><span class="line">    public boolean setEntryIfNotExists(String key, String ticketNo, String expx, int time) &#123;</span><br><span class="line"></span><br><span class="line">        TimeUnit unit &#x3D; null;</span><br><span class="line"></span><br><span class="line">        switch (expx) &#123;</span><br><span class="line">            case &quot;EX&quot;:</span><br><span class="line">                unit &#x3D; TimeUnit.SECONDS;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;PX&quot;:</span><br><span class="line">                unit &#x3D; TimeUnit.MILLISECONDS;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                unit &#x3D; TimeUnit.SECONDS;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return redisTemplate.opsForValue().setIfAbsent(key, ticketNo, time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 通过redis过期时间实现限制QPS</span><br><span class="line">     *</span><br><span class="line">     * @param key      主键</span><br><span class="line">     * @param ticketNo 票号</span><br><span class="line">     * @param time     过期时间</span><br><span class="line">     * @param expx     时间单位 TimeUnit</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean setEntryIfNotExists(String key, String ticketNo, int time, TimeUnit expx) &#123;</span><br><span class="line"></span><br><span class="line">        return redisTemplate.opsForValue().setIfAbsent(key, ticketNo, time, expx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 释放redis链接</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void unbindConnection() &#123;</span><br><span class="line"></span><br><span class="line">        RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Spring Data JPA为我们提供了下面的Serializer：GenericToStringSerializer、Jackson2JsonRedisSerializer、JacksonJsonRedisSerializer、JdkSerializationRedisSerializer、OxmSerializer、StringRedisSerializer。由于兼容旧的数据本文没有采用（个人比较喜欢下面这个）。<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9seXVoMTIzL2FydGljbGUvZGV0YWlscy83ODY4MjIwMA==" title="https://blog.csdn.net/xiaolyuh123/article/details/78682200">不同的对比  <i class="fa fa-external-link"></i></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public RedisTemplate&lt;String, Object&gt; redisTemplate() &#123;</span><br><span class="line">    &#x2F;&#x2F;创建Json序列化对象</span><br><span class="line">    Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;解决查询缓存转换异常的问题</span><br><span class="line">    ObjectMapper om &#x3D; new ObjectMapper();</span><br><span class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将默认序列化改为Jackson2JsonRedisSerializer序列化</span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;();</span><br><span class="line">    &#x2F;&#x2F; key序列化</span><br><span class="line">    template.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#x2F;&#x2F; value序列化</span><br><span class="line">    template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#x2F;&#x2F; Hash key序列化</span><br><span class="line">    template.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    &#x2F;&#x2F; Hash value序列化</span><br><span class="line">    template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory());</span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    return template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。 它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。 Redis主要分为Standalone（单例模式）和Sentinel（哨兵模式）具体这个本篇文章不过多介绍
    
    </summary>
    
    
      <category term="技术" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="代码" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="Spring" scheme="http://b.wanty.cn/tags/Spring/"/>
    
      <category term="redis" scheme="http://b.wanty.cn/tags/redis/"/>
    
      <category term="lettuce" scheme="http://b.wanty.cn/tags/lettuce/"/>
    
      <category term="java" scheme="http://b.wanty.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle游标测试</title>
    <link href="http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle%E6%B8%B8%E6%A0%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Oracle%E6%B8%B8%E6%A0%87%E6%B5%8B%E8%AF%95/</id>
    <published>2019-10-11T11:20:35.000Z</published>
    <updated>2023-04-18T01:25:56.150Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、创建测试表"><a href="#1、创建测试表" class="headerlink" title="1、创建测试表"></a>1、创建测试表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a_test1</span><br><span class="line">     (</span><br><span class="line">     column_1 <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">     <span class="keyword">constraint</span> a_test2_pk</span><br><span class="line">     primary <span class="keyword">key</span>,</span><br><span class="line">     column_2 <span class="built_in">varchar2</span>(<span class="number">12</span>)</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a_test2</span><br><span class="line">     (</span><br><span class="line">     column_1 <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">     <span class="keyword">constraint</span> a_test2_pk</span><br><span class="line">     primary <span class="keyword">key</span>,</span><br><span class="line">     column_2 <span class="built_in">varchar2</span>(<span class="number">12</span>)</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> seq_a_test</span><br><span class="line">            <span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">1</span>  <span class="comment">-- 每次加几个</span></span><br><span class="line">            <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1399</span>       <span class="comment">-- 从1开始计数</span></span><br><span class="line">            <span class="keyword">NOMAXVALUE</span>        <span class="comment">-- 不设置最大值</span></span><br><span class="line">            <span class="keyword">NOCYCLE</span>               <span class="comment">-- 一直累加，不循环</span></span><br><span class="line">            <span class="keyword">CACHE</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="2、循环插入"><a href="#2、循环插入" class="headerlink" title="2、循环插入"></a>2、循环插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--普通循环插入</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="number">1</span> .. <span class="number">100</span></span><br><span class="line">        <span class="keyword">loop</span></span><br><span class="line">            <span class="keyword">insert</span> <span class="keyword">into</span> A_TEST1(column_1, column_2) <span class="keyword">values</span> (seq_a_test.nextval,<span class="string">'aaa'</span>);</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">    <span class="keyword">commit</span> ;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a_test1;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--cursor 循环插入</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="keyword">cursor</span> cursor_id <span class="keyword">is</span> <span class="keyword">select</span> COLUMN_1 <span class="keyword">from</span> a_test1 <span class="keyword">order</span> <span class="keyword">by</span> COLUMN_1 <span class="keyword">desc</span> ;</span><br><span class="line">    cid cursor_id%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">open</span> cursor_id;</span><br><span class="line">    loop</span><br><span class="line">        fetch cursor_id into cid;</span><br><span class="line">        Exit when cursor_id%notfound;</span><br><span class="line">        if cid.COLUMN_1 &lt;&gt; 1400 then</span><br><span class="line">            <span class="keyword">insert</span> <span class="keyword">into</span> A_TEST2(column_1, column_2) <span class="keyword">values</span> (cid.COLUMN_1+<span class="number">1000</span>,<span class="string">'aaa'</span>);</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">    EXCEPTION</span><br><span class="line">        when others then</span><br><span class="line">        close cursor_id;</span><br><span class="line">    if cursor_id%isopen then</span><br><span class="line">        close cursor_id;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h4 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> a_test1;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> a_test2;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> seq_a_test;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      生产中经常要用到 将从表插入一些数据,但是手动插入数量较为巨大.因而循环及判断语句在oracle匿名代码块中起到了很大的作用！
    
    </summary>
    
    
      <category term="技术" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="数据库" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="http://b.wanty.cn/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>CentOs7  安装Docker 并配置代理访问外网</title>
    <link href="http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CentOs7-%E5%AE%89%E8%A3%85Docker-%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/"/>
    <id>http://b.wanty.cn/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/CentOs7-%E5%AE%89%E8%A3%85Docker-%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</id>
    <published>2019-05-11T11:58:39.000Z</published>
    <updated>2023-04-18T01:25:56.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Linux version 3.10.0-693.el7.x86_64<br>docker为最新的即可</p></blockquote><h3 id="一-配置yum代理"><a href="#一-配置yum代理" class="headerlink" title="一 配置yum代理"></a>一 配置yum代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim  &#x2F;etc&#x2F;yum.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy&#x3D;http:&#x2F;&#x2F;172.20.36.11:80</span><br></pre></td></tr></table></figure><h3 id="二-修改yum源为阿里源"><a href="#二-修改yum源为阿里源" class="headerlink" title="二 修改yum源为阿里源"></a>二 修改yum源为阿里源</h3><h4 id="进入yum源配置文件夹。（配置之前先看看有没有安装wget命令呢，没的话可以先用当前的yum源安装一下再说。yum-y-install-wget）"><a href="#进入yum源配置文件夹。（配置之前先看看有没有安装wget命令呢，没的话可以先用当前的yum源安装一下再说。yum-y-install-wget）" class="headerlink" title="进入yum源配置文件夹。（配置之前先看看有没有安装wget命令呢，没的话可以先用当前的yum源安装一下再说。yum -y install wget）"></a>进入yum源配置文件夹。（配置之前先看看有没有安装wget命令呢，没的话可以先用当前的yum源安装一下再说。yum -y install wget）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;yum.repos.d</span><br></pre></td></tr></table></figure><h4 id="备份一下之前的配置文件。"><a href="#备份一下之前的配置文件。" class="headerlink" title="备份一下之前的配置文件。"></a>备份一下之前的配置文件。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv .&#x2F;CentOS-Base.repo .&#x2F;CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure><h4 id="下载阿里源或者163源"><a href="#下载阿里源或者163源" class="headerlink" title="下载阿里源或者163源"></a>下载阿里源或者163源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line">wget http:&#x2F;&#x2F;mirrors.163.com&#x2F;.help&#x2F;CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure><h4 id="移动到源默认位置"><a href="#移动到源默认位置" class="headerlink" title="移动到源默认位置"></a>移动到源默认位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv CentOS7-Base-163.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</span><br><span class="line">mv Centos-7.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</span><br></pre></td></tr></table></figure><h4 id="运行yum-clean-all-yum-makecache生成缓存即可，之后便可以使用yum安装软件了。"><a href="#运行yum-clean-all-yum-makecache生成缓存即可，之后便可以使用yum安装软件了。" class="headerlink" title="运行yum clean all , yum makecache生成缓存即可，之后便可以使用yum安装软件了。"></a>运行yum clean all , yum makecache生成缓存即可，之后便可以使用yum安装软件了。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h3 id="三-docker-安装报错-container-selinux-gt-2-9-解决"><a href="#三-docker-安装报错-container-selinux-gt-2-9-解决" class="headerlink" title="三 docker 安装报错 container-selinux &gt;= 2.9 解决"></a>三 docker 安装报错 container-selinux &gt;= 2.9 解决</h3><h4 id="阿里云上的epel源"><a href="#阿里云上的epel源" class="headerlink" title="阿里云上的epel源"></a>阿里云上的epel源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y  install epel-release</span><br></pre></td></tr></table></figure><h4 id="安装-container-selinux"><a href="#安装-container-selinux" class="headerlink" title="安装 container-selinux"></a>安装 container-selinux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install container-selinux</span><br></pre></td></tr></table></figure><h3 id="四-安装docker"><a href="#四-安装docker" class="headerlink" title="四 安装docker"></a>四 安装docker</h3><h4 id="安装docker服务"><a href="#安装docker服务" class="headerlink" title="安装docker服务"></a>安装docker服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="配置docker源"><a href="#配置docker源" class="headerlink" title="配置docker源"></a>配置docker源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;deamon.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [ &quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;],</span><br><span class="line">    &quot;insecure-registries&quot;: [ &quot;172.19.69.2:5000&quot;,&quot;172.22.0.35:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置docker-http代理"><a href="#配置docker-http代理" class="headerlink" title="配置docker http代理"></a>配置docker http代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;http-proxy.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line"> Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;username:password@126.15.15.1:8888&quot;</span><br></pre></td></tr></table></figure><h4 id="刷新源并重启"><a href="#刷新源并重启" class="headerlink" title="刷新源并重启"></a>刷新源并重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker </span><br><span class="line">systemctl show --property&#x3D;Environment docker</span><br></pre></td></tr></table></figure><h4 id="设置docker开启自动启动"><a href="#设置docker开启自动启动" class="headerlink" title="设置docker开启自动启动"></a>设置docker开启自动启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Docker 在没用的时候觉得就是个虚拟机而已，真正用起来发现，这东西真香！ 喜欢的的不得了，文章总结了一些基于COS7的安装过程。
    
    </summary>
    
    
      <category term="技术" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="服务器" scheme="http://b.wanty.cn/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Docker" scheme="http://b.wanty.cn/tags/Docker/"/>
    
      <category term="linxu" scheme="http://b.wanty.cn/tags/linxu/"/>
    
  </entry>
  
</feed>
